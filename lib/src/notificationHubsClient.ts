/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import * as Parameters from "./models/parameters";
import { NotificationHubsClientContext } from "./notificationHubsClientContext";
import {
  NotificationHubsClientOptionalParams,
  Enum0,
  Enum1,
  SendMessage$binaryOptionalParams,
  SendMessage$jsonOptionalParams
} from "./models";

export class NotificationHubsClient extends NotificationHubsClientContext {
  /**
   * Initializes a new instance of the NotificationHubsClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param hubName Notification Hub Name
   * @param xMsVersion API Version
   * @param authorization Authorization Header value
   * @param serviceBusNotificationFormat Platform type for the notification
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    hubName: string,
    xMsVersion: Enum0,
    authorization: string,
    serviceBusNotificationFormat: Enum1,
    options?: NotificationHubsClientOptionalParams
  ) {
    super(
      credentials,
      hubName,
      xMsVersion,
      authorization,
      serviceBusNotificationFormat,
      options
    );
  }

  /**
   * Sends a notification to the specified targets.
   * @param namespaceBaseUrl The namespace name, for example https://mynamespace.servicebus.windows.net.
   * @param contentType Upload file type
   * @param body The notification message body
   * @param options The options parameters.
   */
  sendMessage(
    namespaceBaseUrl: string,
    contentType: "application/octet-stream",
    body: coreRestPipeline.RequestBodyType,
    options?: SendMessage$binaryOptionalParams
  ): Promise<void>;
  /**
   * Sends a notification to the specified targets.
   * @param namespaceBaseUrl The namespace name, for example https://mynamespace.servicebus.windows.net.
   * @param contentType Body Parameter content-type
   * @param body The notification message body
   * @param options The options parameters.
   */
  sendMessage(
    namespaceBaseUrl: string,
    contentType: "application/json",
    body: string,
    options?: SendMessage$jsonOptionalParams
  ): Promise<void>;
  /**
   * Sends a notification to the specified targets.
   * @param args Includes all the parameters for this operation.
   */
  sendMessage(
    ...args:
      | [
          string,
          "application/octet-stream",
          coreRestPipeline.RequestBodyType,
          SendMessage$binaryOptionalParams?
        ]
      | [string, "application/json", string, SendMessage$jsonOptionalParams?]
  ): Promise<void> {
    let operationSpec: coreClient.OperationSpec;
    let operationArguments: coreClient.OperationArguments;
    let options;
    if (args[1] === "application/octet-stream") {
      operationSpec = sendMessage$binaryOperationSpec;
      operationArguments = {
        namespaceBaseUrl: args[0],
        contentType: args[1],
        body: args[2],
        options: args[3]
      };
      options = args[3];
    } else if (args[1] === "application/json") {
      operationSpec = sendMessage$jsonOperationSpec;
      operationArguments = {
        namespaceBaseUrl: args[0],
        contentType: args[1],
        body: args[2],
        options: args[3]
      };
      options = args[3];
    } else {
      throw new TypeError(
        `"contentType" must be a valid value but instead was "${args[1]}".`
      );
    }
    operationArguments.options = options || {};
    return this.sendOperationRequest(operationArguments, operationSpec);
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer({}, /* isXml */ false);

const sendMessage$binaryOperationSpec: coreClient.OperationSpec = {
  path: "/{hubName}/messages",
  httpMethod: "POST",
  responses: { 201: {}, 400: {}, 401: {}, 403: {}, 404: {}, 413: {} },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion, Parameters.direct],
  urlParameters: [Parameters.namespaceBaseUrl, Parameters.hubName],
  headerParameters: [
    Parameters.contentType,
    Parameters.xMsVersion,
    Parameters.authorization,
    Parameters.serviceBusNotificationDeviceHandle,
    Parameters.serviceBusNotificationFormat,
    Parameters.serviceBusNotificationTags
  ],
  mediaType: "binary",
  serializer
};
const sendMessage$jsonOperationSpec: coreClient.OperationSpec = {
  path: "/{hubName}/messages",
  httpMethod: "POST",
  responses: { 201: {}, 400: {}, 401: {}, 403: {}, 404: {}, 413: {} },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion, Parameters.direct],
  urlParameters: [Parameters.namespaceBaseUrl, Parameters.hubName],
  headerParameters: [
    Parameters.contentType1,
    Parameters.xMsVersion,
    Parameters.authorization,
    Parameters.serviceBusNotificationDeviceHandle,
    Parameters.serviceBusNotificationFormat,
    Parameters.serviceBusNotificationTags
  ],
  mediaType: "json",
  serializer
};
