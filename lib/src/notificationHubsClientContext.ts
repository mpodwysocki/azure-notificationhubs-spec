/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import {
  MSApiVersionType,
  FormatParameterType,
  NotificationHubsClientOptionalParams
} from "./models";

export class NotificationHubsClientContext extends coreClient.ServiceClient {
  namespaceBaseUrl: string;
  xMsVersion: MSApiVersionType;
  apiVersion: string;
  authorization: string;
  ifMatch?: string;
  tag: string;
  continuationToken?: string;
  top?: string;
  filter?: string;
  registrationId: string;
  installationId: string;
  serviceBusNotificationDeviceHandle?: string;
  serviceBusNotificationFormat: FormatParameterType;
  serviceBusNotificationTags?: string;
  direct?: boolean;
  apnsTopic?: string;
  apnsPriority?: string;
  apnsPushType?: string;
  xWNSCachePolicy?: string;
  xWNSPriority?: string;
  xWNSRequestForStatus?: string;
  xWNSTag?: string;
  xWnsttl?: string;
  xWNSType?: string;

  /**
   * Initializes a new instance of the NotificationHubsClientContext class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param namespaceBaseUrl The namespace name, for example https://mynamespace.servicebus.windows.net.
   * @param xMsVersion API Version
   * @param authorization Authorization Header value
   * @param tag The path for the tag to query
   * @param registrationId Registration ID parameter
   * @param installationId Installation ID parameter
   * @param serviceBusNotificationFormat Platform type for the notification
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    namespaceBaseUrl: string,
    xMsVersion: MSApiVersionType,
    authorization: string,
    tag: string,
    registrationId: string,
    installationId: string,
    serviceBusNotificationFormat: FormatParameterType,
    options?: NotificationHubsClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (namespaceBaseUrl === undefined) {
      throw new Error("'namespaceBaseUrl' cannot be null");
    }
    if (xMsVersion === undefined) {
      throw new Error("'xMsVersion' cannot be null");
    }
    if (authorization === undefined) {
      throw new Error("'authorization' cannot be null");
    }
    if (tag === undefined) {
      throw new Error("'tag' cannot be null");
    }
    if (registrationId === undefined) {
      throw new Error("'registrationId' cannot be null");
    }
    if (installationId === undefined) {
      throw new Error("'installationId' cannot be null");
    }
    if (serviceBusNotificationFormat === undefined) {
      throw new Error("'serviceBusNotificationFormat' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: NotificationHubsClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-notificationhubs/7.0.0`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri: options.endpoint || "{namespaceBaseUrl}"
    };
    super(optionsWithDefaults);
    // Parameter assignments
    this.namespaceBaseUrl = namespaceBaseUrl;
    this.xMsVersion = xMsVersion;
    this.authorization = authorization;
    this.tag = tag;
    this.registrationId = registrationId;
    this.installationId = installationId;
    this.serviceBusNotificationFormat = serviceBusNotificationFormat;

    // Assigning values to Constant parameters
    this.apiVersion = options.apiVersion || "2020-06-01";
  }
}
